// -------------------------------------------------------------------------------------------------
// <copyright file="{{this.Name}}DeSerializer.cs" company="Starion Group S.A.">
//
//   Copyright 2022-2025 Starion Group S.A.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
// </copyright>
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// --------THIS IS AN AUTOMATICALLY GENERATED FILE. ANY MANUAL CHANGES WILL BE OVERWRITTEN!--------
// ------------------------------------------------------------------------------------------------

namespace SysML2.NET.Serializer.Json.Core.DTO
{
    using System;
    using System.Text.Json;

    using Microsoft.Extensions.Logging;
    using Microsoft.Extensions.Logging.Abstractions;

    using SysML2.NET.Common;
    using SysML2.NET.Core.DTO;

    using SysML2.NET.Serializer.Json;

    /// <summary>
    /// The purpose of the <see cref="{{ this.Name }}DeSerializer"/> is to provide deserialization capabilities
    /// for the <see cref="I{{ this.Name }}"/> interface
    /// </summary>
    internal static class {{ this.Name }}DeSerializer
    {
        /// <summary>
        /// Deserializes an instance of <see cref="I{{ this.Name }}"/> from the provided <see cref="JsonElement"/>
        /// </summary>
        /// <param name="jsonElement">
        /// The <see cref="JsonElement"/> that contains the <see cref="I{{ this.Name }}"/> json object
        /// </param>
        /// <param name="serializationModeKind">
        /// enumeration specifying what kind of serialization shall be used
        /// </param>
        /// <param name="loggerFactory">
        /// The <see cref="ILoggerFactory"/> used to setup logging
        /// </param>
        /// <returns>
        /// an instance of <see cref="I{{ this.Name }}"/>
        /// </returns>
        internal static I{{ this.Name }} DeSerialize(JsonElement jsonElement, SerializationModeKind serializationModeKind, ILoggerFactory loggerFactory = null)
        {
            var logger = loggerFactory == null ? NullLogger.Instance : loggerFactory.CreateLogger("{{ this.Name }}DeSerializer");

            if (!jsonElement.TryGetProperty("@type"u8, out JsonElement @type))
            {
                throw new InvalidOperationException("The @type property is not available, the {{ this.Name }}DeSerializer cannot be used to deserialize this JsonElement");
            }

            if (@type.GetString() != "{{ this.Name }}")
            {
                throw new InvalidOperationException($"The {{ this.Name }}DeSerializer can only be used to deserialize objects of type I{{ this.Name }}, a {@type.GetString()} was provided");
            }

            var dtoInstance = new SysML2.NET.Core.DTO.{{ this.Name }}();

            if (jsonElement.TryGetProperty("@id"u8, out JsonElement idProperty))
            {
                var propertyValue = idProperty.GetString();
                if (propertyValue == null)
                {
                    throw new JsonException("The @id property is not present, the {{ this.Name }} cannot be deserialized");
                }
                else
                {
                    dtoInstance.Id = Guid.Parse(propertyValue);
                }
            }

            {{#with this as | EClass |}}
            {{#each EClass.AllEStructuralFeaturesOrderByName as | structuralFeature |}}
            {{#unless structuralFeature.Derived }}
                {{#unless structuralFeature.Transient }}
                    if (jsonElement.TryGetProperty("{{ structuralFeature.Name }}"u8, out JsonElement {{ structuralFeature.Name }}Property))
                    {
                        {{#if (StructuralFeature.QueryIsReference structuralFeature)}}
                            {{#if (StructuralFeature.QueryIsEnumerable structuralFeature)}}
                                foreach (var arrayItem in {{ structuralFeature.Name }}Property.EnumerateArray())
                                {
                                    if (arrayItem.TryGetProperty("@id"u8, out JsonElement {{ structuralFeature.Name }}IdProperty))
                                    {
                                        var propertyValue = {{ structuralFeature.Name }}IdProperty.GetString();
                                        if (propertyValue != null)
                                        {
                                            dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }}.Add(Guid.Parse(propertyValue));
                                        }
                                    }
                                }
                            {{ else }}
                                if ({{ structuralFeature.Name }}Property.ValueKind == JsonValueKind.Null)
                                {
                                    {{#if (StructuralFeature.QueryIsNullable structuralFeature) }}
                                        dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }} = null;
                                    {{else}}
                                        dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }} = Guid.Empty;
                                        logger.LogDebug($"the {{ EClass.Name }}.{{String.CapitalizeFirstLetter structuralFeature.Name }} property was not found in the Json. The value is set to Guid.Empty");
                                    {{/if}}
                                }
                                else
                                {
                                    if ({{ structuralFeature.Name }}Property.TryGetProperty("@id"u8, out JsonElement {{ structuralFeature.Name }}IdProperty))
                                    {
                                        var propertyValue = {{ structuralFeature.Name }}IdProperty.GetString();
                                        if (propertyValue != null)
                                        {
                                            dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }} = Guid.Parse(propertyValue);
                                        }
                                    }
                                }
                            {{/if}}
                        {{ else if (StructuralFeature.QueryIsAttribute structuralFeature) }}
                            {{#if (StructuralFeature.QueryIsEnumerable structuralFeature)}}
                                foreach (var arrayItem in {{ structuralFeature.Name }}Property.EnumerateArray())
                                {
                                    {{#if (StructuralFeature.QueryIsBool structuralFeature )}}
                                        var propertyValue = arrayItem.GetBoolean();
                                        if (propertyValue != null)
                                        {
                                            dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }}.Add(propertyValue);
                                        }
                                    {{else if (StructuralFeature.QueryIsNumeric structuralFeature )}}
                                        {{#if (StructuralFeature.QueryIsInteger structuralFeature) }}
                                            dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }}.Add(arrayItem.GetInt32());
                                        {{else if (StructuralFeature.QueryIsDouble structuralFeature) }}
                                            dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }}.Add(arrayItem.GetDouble());
                                        {{ else }}
                                            throw new NotImplementedException("Enumerable Double - {{EClass.Name}}.{{structuralFeature.Name}} is not yet supported");
                                        {{/if}}
                                    {{else if (StructuralFeature.QueryIsEnum structuralFeature )}}
                                         throw new NotImplementedException("Enumerable Enum - {{EClass.Name}}.{{structuralFeature.Name}} is not yet supported");
                                    {{else}}
                                        var propertyValue = arrayItem.GetString();
                                        if (propertyValue != null)
                                        {
                                            dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }}.Add(propertyValue);
                                        }
                                    {{/if}}
                                }
                            {{ else if (StructuralFeature.QueryIsNullable structuralFeature) }}
                                {{#if (StructuralFeature.QueryIsBool structuralFeature )}}
                                    dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.Name }}Property.GetBoolean();
                                {{else if (StructuralFeature.QueryIsNumeric structuralFeature )}}
                                    {{#if (StructuralFeature.QueryIsInteger structuralFeature) }}
                                        dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.Name }}Property.GetInt32();
                                    {{else if (StructuralFeature.QueryIsDouble structuralFeature) }}
                                        dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.Name }}Property.GetDouble();
                                    {{ else }}
                                        new NotImplementedException("nullable - {{EClass.Name}}.{{structuralFeature.Name}} is not yet supported");
                                    {{/if}}
                                {{else if (StructuralFeature.QueryIsEnum structuralFeature )}}
                                    dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.EType.Name }}DeSerializer.DeserializeNullable({{ structuralFeature.Name }}Property.GetString());
                                {{else}}
                                    dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.Name }}Property.GetString();
                                {{/if}}
                            {{ else if (StructuralFeature.QueryIsScalar structuralFeature) }}
                                {{#if (StructuralFeature.QueryIsBool structuralFeature )}}
                                    if ({{ structuralFeature.Name }}Property.ValueKind != JsonValueKind.Null)
                                    {
                                        dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.Name }}Property.GetBoolean();
                                    }
                                {{else if (StructuralFeature.QueryIsNumeric structuralFeature )}}
                                    {{#if (StructuralFeature.QueryIsInteger structuralFeature) }}
                                        dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.Name }}Property.GetInt32();
                                    {{else if (StructuralFeature.QueryIsDouble structuralFeature) }}
                                        dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.Name }}Property.GetDouble();
                                    {{ else }}
                                        new NotImplementedException("Scalar - {{EClass.Name}}.{{structuralFeature.Name}} is not yet supported");
                                    {{/if}}
                                {{else if (StructuralFeature.QueryIsEnum structuralFeature )}}
                                    dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.EType.Name }}DeSerializer.Deserialize({{ structuralFeature.Name }}Property.GetString());
                                {{else}}
                                    var propertyValue = {{structuralFeature.Name }}Property.GetString();
                                    if (propertyValue != null)
                                    {
                                        dtoInstance.{{String.CapitalizeFirstLetter structuralFeature.Name }} = propertyValue;
                                    }
                                {{/if}}
                            {{ else }}
                                throw new NotImplementedException("{{EClass.Name}}.{{structuralFeature.Name}} is not supported");
                            {{/if}}
                        {{/if}}
                    }
                    else
                    {
                        logger.LogDebug($"the {{ structuralFeature.Name }} Json property was not found in the {{ EClass.Name }}: { dtoInstance.Id }");
                    }

                {{/unless}}
            {{/unless}}
            {{/each}}
            {{/with}}

            return dtoInstance;
        }
    }
}

// ------------------------------------------------------------------------------------------------
// --------THIS IS AN AUTOMATICALLY GENERATED FILE. ANY MANUAL CHANGES WILL BE OVERWRITTEN!--------
// ------------------------------------------------------------------------------------------------
