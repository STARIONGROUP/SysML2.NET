// -------------------------------------------------------------------------------------------------
// <copyright file="{{this.Name}}DictionaryReader.cs" company="Starion Group S.A.">
//
//   Copyright 2022-2025 Starion Group S.A.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
// </copyright>
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// --------THIS IS AN AUTOMATICALLY GENERATED FILE. ANY MANUAL CHANGES WILL BE OVERWRITTEN!--------
// ------------------------------------------------------------------------------------------------

namespace SysML2.NET.Serializer.Dictionary.Core.DTO
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using SysML2.NET.Common;
    using SysML2.NET.Core;
    using SysML2.NET.Core.DTO;

    /// <summary>
    /// The purpose of the <see cref="{{this.Name}}DictionaryReader"/> is to read (convert)
    /// a <see cref="Dictionary{String, Object}"/> from an <see cref="I{{this.Name}}"/>
    /// </summary>
    public static class {{this.Name}}DictionaryReader
    {
        /// <summary>
        /// Reads a <see cref="I{{this.Name}}"/> from a <see cref="Dictionary{String, Object}"/> that contains a key-value-pair
        /// for each property.
        /// </summary>
        /// <param name="dictionary">
        /// The subject <see cref="Dictionary{String, Object}"/> that is to be converted into a <see cref="I{{this.Name}}"/>
        /// </param>
        /// <param name="dictionaryKind">
        /// The source <see cref="DictionaryKind"/> that is to be read from
        /// </param>
        /// <returns>
        /// An instance of <see cref="I{{this.Name}}"/>
        /// </returns>
        /// <remarks>
        /// When the <see cref="DictionaryKind"/> is <see cref="DictionaryKind.Complex"/> then the values that are read from the
        /// <see cref="Dictionary{String, Object}"/> are read as is. When the <see cref="DictionaryKind"/> is <see cref="DictionaryKind.Simplified"/>
        /// then the following applies:
        /// The values that are of the following types are read as is:
        ///   - Number, an abstract type, which has the subtypes Integer and Float
        ///   - String
        ///   - Boolean
        ///   - The spatial type Point
        ///   - Temporal types: Date, Time, LocalTime, DateTime, LocalDateTime and Duration
        /// values of other types are converted from string, in case these are an <see cref="IEnumerable{T}"/> then
        /// the values are converted from an Array of String using JSON notation, i.e. [ value_1, ..., value_n ]
        /// </remarks>
        public static IData Read(Dictionary<string, object> dictionary, DictionaryKind dictionaryKind)
        {
            switch (dictionaryKind)
            {
                case DictionaryKind.Complex:
                    return ReadComplex(dictionary);
                case DictionaryKind.Simplified:
                    return ReadSimplified(dictionary);
                default:
                    throw new NotSupportedException($"The dictionaryKind:{dictionaryKind} is not supported");
            }
        }

        /// <summary>
        /// Reads a <see cref="I{{this.Name}}"/> from a <see cref="Dictionary{String, Object}"/> that contains a key-value-pair
        /// for each property.
        /// </summary>
        /// <param name="dictionary">
        /// The subject <see cref="Dictionary{String, Object}"/> that is to be converted into a <see cref="I{{this.Name}}"/>
        /// </param>
        /// <returns>
        /// An instance of <see cref="I{{this.Name}}"/>
        /// </returns>
        /// <remarks>
        /// When the <see cref="DictionaryKind"/> is <see cref="DictionaryKind.Complex"/> then the values that are read from the
        /// <see cref="Dictionary{String, Object}"/> are read as is. When the <see cref="DictionaryKind"/> is <see cref="DictionaryKind.Simplified"/>
        /// then the following applies:
        /// The values that are of the following types are read as is:
        ///   - Number, an abstract type, which has the subtypes Integer and Float
        ///   - String
        ///   - Boolean
        ///   - The spatial type Point
        ///   - Temporal types: Date, Time, LocalTime, DateTime, LocalDateTime and Duration
        /// values of other types are converted from string, in case these are an <see cref="IEnumerable{T}"/> then
        /// the values are converted from an Array of String using JSON notation, i.e. [ value_1, ..., value_n ]
        /// </remarks>
        private static I{{this.Name}} ReadSimplified(Dictionary<string, object> dictionary)
        {
            var {{String.LowerCaseFirstLetter this.Name}}Instance = DictionaryNullAndTypeCheck(dictionary);

            {{#with this as | EClass |}}
            {{#each EClass.AllEStructuralFeaturesOrderByName as | structuralFeature |}}
            {{#unless structuralFeature.Derived }}
                {{#unless structuralFeature.Transient }}
                    if (!dictionary.TryGetValue("{{ structuralFeature.Name }}", out object {{ structuralFeature.Name }}Object))
                    {
                        throw new ArgumentException("The {{ structuralFeature.Name }} property is missing from the dictionary, the dictionary cannot be converted into a {{EClass.Name}}");
                    }
                    {{#if (StructuralFeature.QueryIsReference structuralFeature) }}
                        {{#if (StructuralFeature.QueryIsEnumerable structuralFeature) }}
                            List<Guid> {{ structuralFeature.Name }}Feature = ({{ structuralFeature.Name }}Object as List<string>)?.Select(Guid.Parse).ToList();
                        {{ else if (StructuralFeature.QueryIsNullable structuralFeature) }}
                            Guid? {{ structuralFeature.Name }}Feature = {{ structuralFeature.Name }}Object == null ? (Guid?)null : Guid.Parse(Convert.ToString({{ structuralFeature.Name }}Object));
                        {{ else }}
                            Guid {{ structuralFeature.Name }}Feature = Guid.Parse(Convert.ToString({{ structuralFeature.Name }}Object));
                        {{/if}}
                    {{ else if (StructuralFeature.QueryIsAttribute structuralFeature) }}
                        {{#if (StructuralFeature.QueryIsEnumerable structuralFeature)}}
                            {{#if (StructuralFeature.QueryIsString structuralFeature )}}
                                List<string> {{ structuralFeature.Name }}Feature = {{ structuralFeature.Name }}Object as List<string>;
                            {{else}}
                                throw new NotImplementedException("{{#DTO.TypeName structuralFeature }} - {{EClass.Name}}.{{structuralFeature.Name}} is not yet supported");
                            {{/if}}
                        {{ else if (StructuralFeature.QueryIsNullable structuralFeature) }}
                            {{#if (StructuralFeature.QueryIsEnum structuralFeature )}}
                                {{ structuralFeature.EType.Name }}? {{ structuralFeature.Name }}Feature = {{ structuralFeature.Name }}Object == null ? null : ({{ structuralFeature.EType.Name }}?)Enum.Parse(typeof({{ structuralFeature.EType.Name }}), Convert.ToString({{ structuralFeature.Name }}Object), true);
                            {{else if (StructuralFeature.QueryIsString structuralFeature )}}
                                string {{ structuralFeature.Name }}Feature = {{ structuralFeature.Name }}Object == null ? null : Convert.ToString({{ structuralFeature.Name }}Object);
                            {{else}}
                                throw new NotImplementedException("{{#DTO.TypeName structuralFeature }} - {{EClass.Name}}.{{structuralFeature.Name}} is not yet supported");
                            {{/if}}
                        {{ else if (StructuralFeature.QueryIsScalar structuralFeature) }}
                            {{#if (StructuralFeature.QueryIsBool structuralFeature )}}
                                bool {{ structuralFeature.Name }}Feature = Convert.ToBoolean({{ structuralFeature.Name }}Object);
                            {{else if (StructuralFeature.QueryIsNumeric structuralFeature )}}
                                {{#if (StructuralFeature.QueryIsInteger structuralFeature) }}
                                    int {{ structuralFeature.Name }}Feature = Convert.ToInt32({{ structuralFeature.Name }}Object);
                                {{else if (StructuralFeature.QueryIsDouble structuralFeature) }}
                                    double {{ structuralFeature.Name }}Feature = Convert.ToDouble({{ structuralFeature.Name }}Object);
                                {{ else }}
                                    new NotImplementedException("nullable - {{EClass.Name}}.{{structuralFeature.Name}} is not yet supported");
                                {{/if}}
                            {{else if (StructuralFeature.QueryIsEnum structuralFeature )}}
                                {{ structuralFeature.EType.Name }} {{ structuralFeature.Name }}Feature = ({{ structuralFeature.EType.Name }})Enum.Parse(typeof({{ structuralFeature.EType.Name }}), Convert.ToString({{ structuralFeature.Name }}Object), true);
                            {{else if (StructuralFeature.QueryIsString structuralFeature )}}
                                string {{ structuralFeature.Name }}Feature = Convert.ToString({{ structuralFeature.Name }}Object);
                            {{else}}
                                throw new NotImplementedException("{{#DTO.TypeName structuralFeature }} - {{EClass.Name}}.{{structuralFeature.Name}} is not yet supported");
                            {{/if}}
                        {{ else }}
                            throw new NotImplementedException("{{EClass.Name}}.{{structuralFeature.Name}} is not supported");
                        {{/if}}
                    {{/if}}

                {{/unless}}
            {{/unless}}
            {{/each}}
            {{/with}}

            {{#with this as | EClass |}}
            {{#each EClass.AllEStructuralFeaturesOrderByName as | structuralFeature |}}
            {{#unless structuralFeature.Derived }}
                {{#unless structuralFeature.Transient }}
                    {{#if (StructuralFeature.QueryIsEnumerable structuralFeature)}}
                        {{#if (StructuralFeature.QueryIsReference structuralFeature)}}
                            {{String.LowerCaseFirstLetter EClass.Name}}Instance.{{ String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.Name }}Feature ?? new List<Guid>();
                        {{else if (StructuralFeature.QueryIsString structuralFeature )}}
                            {{String.LowerCaseFirstLetter EClass.Name}}Instance.{{ String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.Name }}Feature ?? new List<string>();
                        {{ else }}
                            throw new NotImplementedException("{{#DTO.TypeName structuralFeature }} - {{EClass.Name}}.{{structuralFeature.Name}} is not yet supported");
                        {{/if}}
                    {{ else }}
                        {{String.LowerCaseFirstLetter EClass.Name}}Instance.{{ String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.Name }}Feature;
                    {{/if}}
                {{/unless}}
            {{/unless}}
            {{/each}}
            {{/with}}

            return {{String.LowerCaseFirstLetter this.Name}}Instance;
        }

        /// <summary>
        /// Reads a <see cref="I{{this.Name}}"/> from a <see cref="Dictionary{String, Object}"/> that contains a key-value-pair
        /// for each property.
        /// </summary>
        /// <param name="dictionary">
        /// The subject <see cref="Dictionary{String, Object}"/> that is to be converted into a <see cref="I{{this.Name}}"/>
        /// </param>
        /// <returns>
        /// An instance of <see cref="I{{this.Name}}"/>
        /// </returns>
        private static I{{this.Name}} ReadComplex(Dictionary<string, object> dictionary)
        {
            var {{String.LowerCaseFirstLetter this.Name}}Instance = DictionaryNullAndTypeCheck(dictionary);

            {{#with this as | EClass |}}
            {{#each EClass.AllEStructuralFeaturesOrderByName as | structuralFeature |}}
            {{#unless structuralFeature.Derived }}
                {{#unless structuralFeature.Transient }}
                    if (!dictionary.TryGetValue("{{ structuralFeature.Name }}", out object {{ structuralFeature.Name }}Object))
                    {
                        throw new ArgumentException("The {{ structuralFeature.Name }} property is missing from the dictionary, the dictionary cannot be converted into a {{EClass.Name}}");
                    }
                    {{#if (StructuralFeature.QueryIsReference structuralFeature) }}
                        {{#if (StructuralFeature.QueryIsEnumerable structuralFeature) }}
                            List<Guid> {{ structuralFeature.Name }}Feature = ({{ structuralFeature.Name }}Object as List<Guid>);
                        {{ else if (StructuralFeature.QueryIsNullable structuralFeature) }}
                            Guid? {{ structuralFeature.Name }}Feature = (Guid?){{ structuralFeature.Name }}Object;
                        {{ else }}
                            Guid {{ structuralFeature.Name }}Feature = Guid.Parse(Convert.ToString({{ structuralFeature.Name }}Object));
                        {{/if}}
                    {{ else if (StructuralFeature.QueryIsAttribute structuralFeature) }}
                        {{#if (StructuralFeature.QueryIsEnumerable structuralFeature)}}
                            {{#if (StructuralFeature.QueryIsString structuralFeature )}}
                                List<string> {{ structuralFeature.Name }}Feature = {{ structuralFeature.Name }}Object as List<string>;
                            {{else}}
                                throw new NotImplementedException("{{#DTO.TypeName structuralFeature }} - {{EClass.Name}}.{{structuralFeature.Name}} is not yet supported");
                            {{/if}}
                        {{ else if (StructuralFeature.QueryIsNullable structuralFeature) }}
                            {{#if (StructuralFeature.QueryIsEnum structuralFeature )}}
                                {{ structuralFeature.EType.Name }}? {{ structuralFeature.Name }}Feature = ({{ structuralFeature.EType.Name }}?){{ structuralFeature.Name }}Object;
                            {{else if (StructuralFeature.QueryIsString structuralFeature )}}
                                string {{ structuralFeature.Name }}Feature = {{ structuralFeature.Name }}Object == null ? null : Convert.ToString({{ structuralFeature.Name }}Object);
                            {{else}}
                                throw new NotImplementedException("{{#DTO.TypeName structuralFeature }} - {{EClass.Name}}.{{structuralFeature.Name}} is not yet supported");
                            {{/if}}
                        {{ else if (StructuralFeature.QueryIsScalar structuralFeature) }}
                            {{#if (StructuralFeature.QueryIsBool structuralFeature )}}
                                bool {{ structuralFeature.Name }}Feature = Convert.ToBoolean({{ structuralFeature.Name }}Object);
                            {{else if (StructuralFeature.QueryIsNumeric structuralFeature )}}
                                {{#if (StructuralFeature.QueryIsInteger structuralFeature) }}
                                    int {{ structuralFeature.Name }}Feature = Convert.ToInt32({{ structuralFeature.Name }}Object);
                                {{else if (StructuralFeature.QueryIsDouble structuralFeature) }}
                                    double {{ structuralFeature.Name }}Feature = Convert.ToDouble({{ structuralFeature.Name }}Object);
                                {{ else }}
                                    new NotImplementedException("nullable - {{EClass.Name}}.{{structuralFeature.Name}} is not yet supported");
                                {{/if}}
                            {{else if (StructuralFeature.QueryIsEnum structuralFeature )}}
                                {{ structuralFeature.EType.Name }} {{ structuralFeature.Name }}Feature = ({{ structuralFeature.EType.Name }}){{ structuralFeature.Name }}Object;
                            {{else if (StructuralFeature.QueryIsString structuralFeature )}}
                                string {{ structuralFeature.Name }}Feature = Convert.ToString({{ structuralFeature.Name }}Object);
                            {{else}}
                                throw new NotImplementedException("{{#DTO.TypeName structuralFeature }} - {{EClass.Name}}.{{structuralFeature.Name}} is not yet supported");
                            {{/if}}
                        {{ else }}
                            throw new NotImplementedException("{{EClass.Name}}.{{structuralFeature.Name}} is not supported");
                        {{/if}}
                    {{/if}}

                {{/unless}}
            {{/unless}}
            {{/each}}
            {{/with}}

            {{#with this as | EClass |}}
            {{#each EClass.AllEStructuralFeaturesOrderByName as | structuralFeature |}}
            {{#unless structuralFeature.Derived }}
                {{#unless structuralFeature.Transient }}
                    {{#if (StructuralFeature.QueryIsEnumerable structuralFeature)}}
                        {{#if (StructuralFeature.QueryIsReference structuralFeature)}}
                            {{String.LowerCaseFirstLetter EClass.Name}}Instance.{{ String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.Name }}Feature ?? new List<Guid>();
                        {{else if (StructuralFeature.QueryIsString structuralFeature )}}
                            {{String.LowerCaseFirstLetter EClass.Name}}Instance.{{ String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.Name }}Feature ?? new List<string>();
                        {{ else }}
                            throw new NotImplementedException("{{#DTO.TypeName structuralFeature }} - {{EClass.Name}}.{{structuralFeature.Name}} is not yet supported");
                        {{/if}}
                    {{ else }}
                        {{String.LowerCaseFirstLetter EClass.Name}}Instance.{{ String.CapitalizeFirstLetter structuralFeature.Name }} = {{ structuralFeature.Name }}Feature;
                    {{/if}}
                {{/unless}}
            {{/unless}}
            {{/each}}
            {{/with}}

            return {{String.LowerCaseFirstLetter this.Name}}Instance;
        }

        /// <summary>
        /// Checks whether the <see cref="Dictionary{String, Object}"/> is not null and whether it is
        /// of type <see cref="{{this.Name}}"/>
        /// </summary>
        /// <param name="dictionary">
        /// The subject <see cref="Dictionary{String, Object}"/> that contains the key-value pairs of
        /// properties and values.
        /// </param>
        /// <returns>
        /// an instance of <see cref="I{{this.Name}}"/>
        /// </returns>
        /// <exception cref="ArgumentNullException">
        /// Thrown when <paramref name="dictionary"/> is null
        /// </exception>
        /// <exception cref="ArgumentException">
        /// Thrown when <paramref name="dictionary"/> is not of type <see cref="{{this.Name}}"/>
        /// </exception>
        private static I{{this.Name}} DictionaryNullAndTypeCheck(Dictionary<string, object> dictionary)
        {
            if (dictionary == null)
            {
                throw new ArgumentNullException("dictionary", "The dictionary may not be null");
            }

            if (!dictionary.TryGetValue("@type", out object typeObject))
            {
                throw new ArgumentException("The type property is missing from the dictionary, the dictionary cannot be converted into a {{this.Name}}");
            }

            var type = Convert.ToString(typeObject);

            if (type != "{{this.Name}}")
            {
                throw new ArgumentException($"The dictionary contains an Object is of type {type} and can therefore not be converted into a {{this.Name}}");
            }

            if (!dictionary.TryGetValue("@id", out object idObject))
            {
                throw new ArgumentException("The id property is missing from the dictionary, the dictionary cannot be converted into a {{this.Name}}");
            }
            var id = Guid.Parse(Convert.ToString(idObject));

            var {{String.LowerCaseFirstLetter this.Name}}Instance = new SysML2.NET.Core.DTO.{{this.Name}}
            {
                Id = id
            };

            return {{String.LowerCaseFirstLetter this.Name}}Instance;
        }
    }
}

// ------------------------------------------------------------------------------------------------
// --------THIS IS AN AUTOMATICALLY GENERATED FILE. ANY MANUAL CHANGES WILL BE OVERWRITTEN!--------
// ------------------------------------------------------------------------------------------------
