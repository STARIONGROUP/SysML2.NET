// -------------------------------------------------------------------------------------------------
// <copyright file="{{ this.Name }}Extensions.cs" company="Starion Group S.A.">
//
//   Copyright 2022-2025 Starion Group S.A.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
// </copyright>
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// --------THIS IS AN AUTOMATICALLY GENERATED FILE. ANY MANUAL CHANGES WILL BE OVERWRITTEN!--------
// ------------------------------------------------------------------------------------------------

namespace SysML2.NET.Dal
{
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    using Core.POCO;

    /// <summary>
    /// A static class that provides extension methods for the <see cref="{{ this.Name }}"/> class
    /// </summary>
    public static class {{ this.Name }}Extensions
    {
        /// <summary>
        /// Updates the value properties of the <see cref="{{ this.Name }}"/> by setting the value equal to that of the dto
        /// Removes deleted objects from the reference properties and returns the unique identifiers
        /// of the objects that have been removed from contained properties
        /// </summary>
        /// <param name="poco">
        /// The <see cref="{{ this.Name }}"/> that is to be updated
        /// </param>
        /// <param name="dto">
        /// The DTO that is used to update the <see cref="{{ this.Name }}"/> with
        /// </param>
        /// <returns>
        /// The unique identifiers of the objects that have been removed from contained properties
        /// </returns>
        /// <exception cref="ArgumentNullException">
        /// Thrown when the <paramref name="poco"/> or <paramref name="dto"/> is null
        /// </exception>
        public static IEnumerable<Guid> UpdateValueAndRemoveDeletedReferenceProperties(this Core.POCO.{{ this.Name }} poco, Core.DTO.{{ this.Name }} dto)
        {
            if (poco == null)
            {
                throw new ArgumentNullException(nameof(poco), $"the {nameof(poco)} may not be null");
            }

            if (dto == null)
            {
                throw new ArgumentNullException(nameof(dto), $"the {nameof(dto)} may not be null");
            }

            var identifiersOfObjectsToDelete = new List<Guid>();

            {{#each this.AllEStructuralFeaturesOrderByName as | structuralFeature |}}
            {{#unless structuralFeature.Derived }}
            {{#unless structuralFeature.Transient }}
                {{#if (StructuralFeature.QueryIsReference structuralFeature)}}
                    {{#if (StructuralFeature.QueryIsEnumerable structuralFeature) }}
                            var {{ structuralFeature.Name}}ToDelete = poco.{{ String.PascalCase structuralFeature.Name}}.Select(x => x.Id).Except(dto.{{ String.PascalCase structuralFeature.Name}});
                            foreach (var identifier in {{ structuralFeature.Name}}ToDelete)
                            {
                                poco.{{ String.PascalCase structuralFeature.Name}}.Remove(poco.{{ String.PascalCase structuralFeature.Name}}.Single(x => x.Id == identifier));
                            }
                        {{#if (StructuralFeature.QueryIsContainment structuralFeature) }}
                            identifiersOfObjectsToDelete.AddRange({{ structuralFeature.Name}}ToDelete);
                        {{/if}}

                    {{/if}}
                {{else if (StructuralFeature.QueryIsAttribute structuralFeature)}}
                    poco.{{ String.PascalCase structuralFeature.Name }} = dto.{{ String.PascalCase structuralFeature.Name }};

                {{/if}}
            {{/unless}}
            {{/unless}}
            {{/each}}

            return identifiersOfObjectsToDelete;
        }

        /// <summary>
        /// Updates the Reference properties of the <see cref="{{ this.Name }}"/> using the data (identifiers) encapsulated in the DTO
        /// and the provided cache to find the referenced object.
        /// </summary>
        /// <param name="poco">
        /// The <see cref="{{ this.Name }}"/> that is to be updated
        /// </param>
        /// <param name="dto">
        /// The DTO that is used to update the <see cref="{{ this.Name }}"/> with
        /// </param>
        /// <param name="cache">
        /// The <see cref="ConcurrentDictionary{Guid, Lazy{Core.POCO.IElement}}"/> that contains the
        /// <see cref="Core.POCO.IElement"/>s that are know and cached.
        /// </param>
        /// <exception cref="ArgumentNullException"></exception>
        public static void UpdateReferenceProperties(this Core.POCO.{{ this.Name }} poco, Core.DTO.{{ this.Name }} dto, ConcurrentDictionary<Guid, Lazy<Core.POCO.IElement>> cache)
        {
            if (poco == null)
            {
                throw new ArgumentNullException(nameof(poco), $"the {nameof(poco)} may not be null");
            }

            if (dto == null)
            {
                throw new ArgumentNullException(nameof(dto), $"the {nameof(dto)} may not be null");
            }

            if (cache == null)
            {
                throw new ArgumentNullException(nameof(cache), $"the {nameof(cache)} may not be null");
            }

            Lazy<Core.POCO.IElement> lazyPoco;

            {{#each this.AllEStructuralFeaturesOrderByName as | structuralFeature |}}
            {{#unless structuralFeature.Derived }}
            {{#unless structuralFeature.Transient }}
                {{#if (structuralFeature.QueryIsReference structuralFeature)}}
                    {{#if (structuralFeature.QueryIsEnumerable structuralFeature) }}
                        var {{ structuralFeature.Name}}ToAdd = dto.{{ String.PascalCase structuralFeature.Name}}.Except(poco.{{ String.PascalCase structuralFeature.Name}}.Select(x => x.Id));
                        foreach (var identifier in {{ structuralFeature.Name}}ToAdd)
                        {
                            if (cache.TryGetValue(identifier, out lazyPoco))
                            {
                                {{#if (StructuralFeature.QueryIsAbstract structuralFeature) }}
                                poco.{{ String.PascalCase structuralFeature.Name}}.Add((I{{ #StructuralFeature.TypeName structuralFeature.Name}})lazyPoco.Value);
                                {{else}}
                                poco.{{ String.PascalCase structuralFeature.Name}}.Add((Core.POCO.{{ #StructuralFeature.TypeName structuralFeature.Name}})lazyPoco.Value);
                                {{/if}}
                            }
                        }

                    {{else if (structuralFeature.QueryIsNullable structuralFeature) }}
                        if (dto.{{ String.PascalCase structuralFeature.Name}}.HasValue && cache.TryGetValue(dto.{{ String.PascalCase structuralFeature.Name}}.Value, out lazyPoco))
                        {
                            {{#if (StructuralFeature.QueryIsAbstract structuralFeature) }}
                            poco.{{ String.PascalCase structuralFeature.Name}} = (I{{#StructuralFeature.TypeName structuralFeature }})lazyPoco.Value;
                            {{else}}
                            poco.{{ String.PascalCase structuralFeature.Name}} = (Core.POCO.{{#StructuralFeature.TypeName structuralFeature }})lazyPoco.Value;
                            {{/if}}
                        }
                        else
                        {
                            poco.{{ String.PascalCase structuralFeature.Name}} = null;
                        }

                    {{else}}
                        if (cache.TryGetValue(dto.{{ String.PascalCase structuralFeature.Name}}, out lazyPoco))
                        {
                            {{#if (StructuralFeature.QueryIsAbstract structuralFeature) }}
                            poco.{{ String.PascalCase structuralFeature.Name}} = (I{{#StructuralFeature.TypeName structuralFeature }})lazyPoco.Value;
                            {{else}}
                            poco.{{ String.PascalCase structuralFeature.Name}} = (Core.POCO.{{#StructuralFeature.TypeName structuralFeature }})lazyPoco.Value;
                            {{/if}}
                        }
                        else
                        {
                            poco.{{ String.PascalCase structuralFeature.Name}} = null;
                        }

                    {{/if}}
                {{/if}}
            {{/unless}}
            {{/unless}}
            {{/each}}
        }

        /// <summary>
        /// Creates a <see cref="Core.DTO.{{ this.Name }}"/> based on the provided POCO
        /// </summary>
        /// <param name="poco">
        /// The subject <see cref="Core.POCO.{{ this.Name }}"/> from which a DTO is to be created
        /// </param>
        /// <returns>
        /// An instance of <see cref="Core.POCO.{{ this.Name }}"/>
        /// </returns>
        public static Core.DTO.{{ this.Name }} ToDto(this Core.POCO.{{ this.Name }} poco)
        {
            var dto = new Core.DTO.{{ this.Name }}();

            dto.Id = poco.Id;
            {{#each this.AllEStructuralFeaturesOrderByName as | structuralFeature |}}
            {{#unless structuralFeature.Derived }}
            {{#unless structuralFeature.Transient }}
            {{#if (StructuralFeature.QueryIsAttribute structuralFeature) }}
                {{#if (StructuralFeature.QueryIsNullable structuralFeature)}}
                    dto.{{ String.PascalCase structuralFeature.Name }} = poco.{{ String.PascalCase structuralFeature.Name }};
                {{else}}
                    dto.{{ String.PascalCase structuralFeature.Name }} = poco.{{ String.PascalCase structuralFeature.Name }};
                {{/if}}
            {{ else if (StructuralFeature.QueryIsReference structuralFeature)}}
                {{#if (StructuralFeature.QueryIsEnumerable structuralFeature)}}
                    dto.{{ String.PascalCase structuralFeature.Name }} = poco.{{ String.PascalCase structuralFeature.Name }}.Select(x => x.Id).ToList();
                {{ else if (StructuralFeature.QueryIsNullable structuralFeature)}}
                    dto.{{ String.PascalCase structuralFeature.Name }} = poco.{{ String.PascalCase structuralFeature.Name }}?.Id;
                {{ else }}
                    dto.{{ String.PascalCase structuralFeature.Name }} = poco.{{ String.PascalCase structuralFeature.Name }}.Id;
                {{/if}}
            {{/if}}
            {{/unless}}
            {{/unless}}
            {{/each}}

            return dto;
        }
    }
}

// ------------------------------------------------------------------------------------------------
// --------THIS IS AN AUTOMATICALLY GENERATED FILE. ANY MANUAL CHANGES WILL BE OVERWRITTEN!--------
// ------------------------------------------------------------------------------------------------
